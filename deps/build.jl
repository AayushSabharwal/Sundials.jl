using BinaryProvider

# This is where all binaries will get installed
const prefix = Prefix(!isempty(ARGS) ? ARGS[1] : joinpath(@__DIR__,"usr"))

products = [
LibraryProduct(prefix, String["libsundials_sunlinsolspfgmr"]),
LibraryProduct(prefix, String["libsundials_ida"]),
LibraryProduct(prefix, String["libsundials_cvode"]),
LibraryProduct(prefix, String["libsundials_cvodes"]),
LibraryProduct(prefix, String["libsundials_sunmatrixdense"]),
LibraryProduct(prefix, String["libsundials_sunlinsolspbcgs"]),
LibraryProduct(prefix, String["libsundials_idas"]),
LibraryProduct(prefix, String["libsundials_nvecserial"]),
LibraryProduct(prefix, String["libsundials_sunlinsoldense"]),
LibraryProduct(prefix, String["libsundials_sunlinsolspgmr"]),
LibraryProduct(prefix, String["libsundials_sunlinsolpcg"]),
LibraryProduct(prefix, String["libsundials_sunlinsolsptfqmr"]),
LibraryProduct(prefix, String["libsundials_sunmatrixsparse"]),
LibraryProduct(prefix, String["libsundials_sunlinsolband"]),
LibraryProduct(prefix, String["libsundials_sunmatrixband"]),
LibraryProduct(prefix, String["libsundials_kinsol"]),
LibraryProduct(prefix, String["libsundials_arkode"])
]

libsundials_nvecserial = LibraryProduct(prefix, String["libsundials_nvecserial"])
libsundials_kinsol     = LibraryProduct(prefix, String["libsundials_kinsol"])
libsundials_cvodes     = LibraryProduct(prefix, String["libsundials_cvodes"])
libsundials_idas       = LibraryProduct(prefix, String["libsundials_idas"])

# Download binaries from hosted location
bin_prefix = "https://github.com/tshort/SundialsBuilder/releases/download/sundials-3.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/Sundials.aarch64-linux-gnu.tar.gz", "9f133576908fb3cfc72dbb9974e5b70b30d0b940b54edab29c433a2857a06ff5"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/Sundials.arm-linux-gnueabihf.tar.gz", "e0fa5643751ede9411b6bef0f950493bc424aefbc195625e890b67d5296a2539"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/Sundials.i686-linux-gnu.tar.gz", "9a0914e1db0d5858b25f792e1ac1f9174c7e7bebdc87b79e6a48c05daffe1171"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/Sundials.i686-w64-mingw32.tar.gz", "1203d183aea89002118b9de088e8cf4444b9d3bc90cdd83d807ffd40b1d60851"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/Sundials.powerpc64le-linux-gnu.tar.gz", "1bb46ac166c7f1fef581ae569e16abc4c309e77d9809efe531382058a2aec57b"),
    BinaryProvider.MacOS() => ("$bin_prefix/Sundials.x86_64-apple-darwin14.tar.gz", "1f910ff89ba2633545f1ccf27c94f90849dab38f4cd4566b71c516d8e1326c30"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/Sundials.x86_64-linux-gnu.tar.gz", "b7311ccca12a94f2b46b9a611f50ea6508369505156f56b8927c3a54aa405341"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/Sundials.x86_64-w64-mingw32.tar.gz", "0761e2236c9ab867d42616b633cd6f744cbf4c06c323dfcea79655741a37ab33"),
)
if platform_key() in keys(download_info)
    @show "1st"
    # First, check to see if we're all satisfied
    if any(!satisfied(p; verbose=true) for p in products)
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
    end
    @show "HERE"

    # Finally, write out a deps.jl file that will contain mappings for each
    # named product here: (there will be a "libfoo" variable and a "fooifier"
    # variable, etc...)
    @write_deps_file libsundials_kinsol libsundials_idas libsundials_nvecserial libsundials_cvodes
else
    error("Your platform $(Sys.MACHINE) is not supported by this package!")
end


# using BinaryProvider

# # This is where all binaries will get installed
# const prefix = Prefix(!isempty(ARGS) ? ARGS[1] : joinpath(@__DIR__,"usr"))

# # Instantiate products here.  Examples:
# # libfoo = LibraryProduct(prefix, "libfoo")
# # foo_executable = ExecutableProduct(prefix, "fooifier")
# # libfoo_pc = FileProduct(joinpath(libdir(prefix), "pkgconfig", "libfoo.pc"))

# # Assign products to `products`:
# # products = [libfoo, foo_executable, libfoo_pc]


# # Download binaries from hosted location
# bin_prefix = "https://<path to hosted location such as GitHub Releases>"

# # Listing of files generated by BinaryBuilder:
# download_info = Dict(
#     BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/Sundials.aarch64-linux-gnu.tar.gz", "9f133576908fb3cfc72dbb9974e5b70b30d0b940b54edab29c433a2857a06ff5"),
#     BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/Sundials.arm-linux-gnueabihf.tar.gz", "e0fa5643751ede9411b6bef0f950493bc424aefbc195625e890b67d5296a2539"),
#     BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/Sundials.i686-linux-gnu.tar.gz", "9a0914e1db0d5858b25f792e1ac1f9174c7e7bebdc87b79e6a48c05daffe1171"),
#     BinaryProvider.Windows(:i686) => ("$bin_prefix/Sundials.i686-w64-mingw32.tar.gz", "1203d183aea89002118b9de088e8cf4444b9d3bc90cdd83d807ffd40b1d60851"),
#     BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/Sundials.powerpc64le-linux-gnu.tar.gz", "1bb46ac166c7f1fef581ae569e16abc4c309e77d9809efe531382058a2aec57b"),
#     BinaryProvider.MacOS() => ("$bin_prefix/Sundials.x86_64-apple-darwin14.tar.gz", "1f910ff89ba2633545f1ccf27c94f90849dab38f4cd4566b71c516d8e1326c30"),
#     BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/Sundials.x86_64-linux-gnu.tar.gz", "b7311ccca12a94f2b46b9a611f50ea6508369505156f56b8927c3a54aa405341"),
#     BinaryProvider.Windows(:x86_64) => ("$bin_prefix/Sundials.x86_64-w64-mingw32.tar.gz", "0761e2236c9ab867d42616b633cd6f744cbf4c06c323dfcea79655741a37ab33"),
# )
# if platform_key() in keys(download_info)
#     # First, check to see if we're all satisfied
#     if any(!satisfied(p; verbose=true) for p in products)
#         # Download and install binaries
#         url, tarball_hash = download_info[platform_key()]
#         install(url, tarball_hash; prefix=prefix, force=true, verbose=true)
#     end

#     # Finally, write out a deps.jl file that will contain mappings for each
#     # named product here: (there will be a "libfoo" variable and a "fooifier"
#     # variable, etc...)
#     @write_deps_file libfoo fooifier
# else
#     error("Your platform $(Sys.MACHINE) is not supported by this package!")
# end

